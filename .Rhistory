leadconc=mydata[,1]
mortality=mydata[,2]
plot(leadconc,mortality)
mydata=read.csv("/Users/muhtasim/Desktop/STAT530/HWs/HW2/HW1_2020.csv")
leadconc=mydata[,1]
mortality=mydata[,2]
plot(leadconc,mortality)
#linear regression
fit=lm(mortality~leadconc, data=mydata)
summary(fit)
coefficients(fit)
#plot of residual vs x and fitted values
par(mfrow=c(1,2))
plot(fit$fitted, fit$res)
plot(leadconc, fit$res)
fit = lm(data$mortality.percent ~ data$leadconc.in.ppm)
data = read.csv("E:\\PhD\\WSU_011682905\\Course Work\\Spring 2020\\STAT 530 - Applied Linear Models\\Homeworks\\HW 2\\HW_1_2020.csv", header = T)
data = read.csv("/Users/muhtasim/Desktop/STAT530/HWs/HW2/HW1_2020.csv", header = T)
plot(data$leadconc.in.ppm, data$mortality.percent, xlab = "Lead Concentration (ppm)", ylab = "Mortality (%)", main = "Scatter plot between lead concentration and mortality percentage")
fit = lm(data$mortality.percent ~ data$leadconc.in.ppm)
par(mfrow= c(2, 2))
plot(fit)
knitr::opts_chunk$set(echo = TRUE)
#linear regression
fit=lm(mortality~leadconc, data=mydata)
summary(fit)
coefficients(fit)
#plot of residual vs x and fitted values
par(mfrow=c(1,2))
plot(fit$fitted, fit$res)
plot(leadconc, fit$res)
# Normal probability plot of Residuals
par(mfrow=c(1,2))
qqnorm(fit$res)
qqline(fit$res)
hist(fit$res)
library(MASS)
boxcox(mortality ~ leadconc, data = mydata,
lambda = seq(-2, 2.0, length = 10))
library(MASS)
boxcox(fit)
lmtest::bptest(fit)
library(lmtest)
dwtest(fit)
library(knitr)
install.packages("kableExtra")
knitr::opts_chunk$set(echo = TRUE)
qt(1-0.05,3,3*(10-1))
qt(1-0.025,3,3*(10-1))
qt(1-0.025,27)
qt(1-0.025,27)
ex10h=data.frame(Color=c(rep("Blue",8),rep("Brown",8),rep("Green",8)),
CFF=c(25.6, 27.0, 27.8, 28.0, 28.3, 28.5, 29.4, 30.2,
23.9, 24.5, 24.8, 25.0, 25.7, 26.5, 27.0, 28.2,
24.5, 25.4, 25.8, 26.4, 26.7, 26.9, 28.0, 29.1))
library(ggplot2)
ggplot(ex10h,mapping=aes(x=Color,y=CFF,color=Color))+
geom_boxplot(color=c("blue","brown","green"))+
geom_point(color=c(rep("blue",8),rep("brown",8),rep("green",8)))
ex10hout=aov(CFF~Color,ex10h)
summary(ex10hout)
TukeyHSD(ex10hout)
source(url("http://math.wsu.edu/math/faculty/jpascual/stat423/R/one-way-T-method.R"))
oneway.t.method(ex10hout,conf.level=.95,ndigits=2)
hw4_2=data.frame(Color=c(rep("Brown",8),rep("Green",5),rep("Blue",6)),
CFF=c(26.8, 27.9, 23.7, 25.0, 26.3, 24.8, 25.7, 24.5,
26.4, 24.2, 28.0, 26.9, 29.1,
25.7, 27.2, 29.9, 28.5, 29.4, 28.3))
library(ggplot2)
ggplot(hw4_2,mapping=aes(x=Color,y=CFF,color=Color))+
geom_boxplot(color=c("brown","green","blue"))+
geom_point(color=c(rep("brown",8),rep("green",5),rep("blue",6)))
hw4_2out=aov(CFF~Color,hw4_2)
summary(hw4_2out)
TukeyHSD(hw4_2out)
source(url("http://math.wsu.edu/math/faculty/jpascual/stat423/R/one-way-T-method.R"))
oneway.t.method(hw4_2out,conf.level=.95,ndigits=2)
hw4_2=data.frame(Color=c(rep("Brown",8),rep("Green",5),rep("Blue",6)),
CFF=c(26.8, 27.9, 23.7, 25.0, 26.3, 24.8, 25.7, 24.5,
26.4, 24.2, 28.0, 26.9, 29.1,
25.7, 27.2, 29.9, 28.5, 29.4, 28.3))
library(ggplot2)
ggplot(hw4_2,mapping=aes(x=Color,y=CFF,color=Color))+
geom_boxplot(color=c("brown","green","blue"))+
geom_point(color=c(rep("brown",8),rep("green",5),rep("blue",6)))
hw4_2out=aov(CFF~Color,hw4_2)
summary(hw4_2out)
TukeyHSD(hw4_2out)
source(url("http://math.wsu.edu/math/faculty/jpascual/stat423/R/one-way-T-method.R"))
oneway.t.method(hw4_2out,conf.level=.95,ndigits=2)
hw4_2=data.frame(Color=c(rep("Brown",8),rep("Green",5),rep("Blue",6)),
CFF=c(26.8, 27.9, 23.7, 25.0, 26.3, 24.8, 25.7, 24.5,
26.4, 24.2, 28.0, 26.9, 29.1,
25.7, 27.2, 29.9, 28.5, 29.4, 28.3))
library(ggplot2)
hw4_2$Color=factor(hw4_2$Color,unique(hw4_2$Color))
# to prevent R from alphabetizing the brands.
ggplot(hw4_2,mapping=aes(x=Color,y=CFF,color=Color))+
geom_boxplot(color=c("brown","green","blue"))+
geom_point(color=c(rep("brown",8),rep("green",5),rep("blue",6)))
hw4_2out=aov(CFF~Color,hw4_2)
summary(hw4_2out)
TukeyHSD(hw4_2out)
source(url("http://math.wsu.edu/math/faculty/jpascual/stat423/R/one-way-T-method.R"))
oneway.t.method(hw4_2out,conf.level=.95,ndigits=2)
hw4_2=data.frame(Color=c(rep("Brown",8),rep("Green",5),rep("Blue",6)),
CFF=c(26.8, 27.9, 23.7, 25.0, 26.3, 24.8, 25.7, 24.5,
26.4, 24.2, 28.0, 26.9, 29.1,
25.7, 27.2, 29.9, 28.5, 29.4, 28.3))
library(ggplot2)
hw4_2$Color=factor(hw4_2$Color,unique(hw4_2$Color))  # to prevent R from alphabetizing the colors.
ggplot(hw4_2,mapping=aes(x=Color,y=CFF,color=Color))+
geom_boxplot(color=c("brown","green","blue"))+
geom_point(color=c(rep("brown",8),rep("green",5),rep("blue",6)))
hw4_2out=aov(CFF~Color,hw4_2)
summary(hw4_2out)
hw4_2=data.frame(Color=c(rep("Brown",8),rep("Green",5),rep("Blue",6)),
CFF=c(26.8, 27.9, 23.7, 25.0, 26.3, 24.8, 25.7, 24.5,
26.4, 24.2, 28.0, 26.9, 29.1,
25.7, 27.2, 29.9, 28.5, 29.4, 28.3))
hw4_2out=aov(CFF~Color,hw4_2)
summary(hw4_2out)
1-pf(4.802,3-1,19-3)
1-pf(4.802,3-1,19-3)
knitr::include_graphics("/Users/muhtasim/Desktop/hw4_q2.jpeg")
Fitted=hw4_2out$fitted.values
## In ANOVA, the fitted value is the sample average within each group/treatment.
## They are fitting the mu's.
Residuals=hw4_2out$residuals
Fitted=hw4_2out$fitted.values
## In ANOVA, the fitted value is the sample average within each group/treatment.
## They are fitting the mu's.
Residuals=hw4_2out$residuals
###create the normal probability plot
qqnorm(Residuals,main="Normal Probability Plot")
qqline(Residuals)
###create the residual plot
plot(Fitted, Residuals,xlab="fitted",ylab="resid")
abline(h=0,lty=2)
Fitted=hw4_2out$fitted.values
## In ANOVA, the fitted value is the sample average within each group/treatment.
## They are fitting the mu's.
Residuals=hw4_2out$residuals
par(mfrow=c(1,2))
###create the normal probability plot
qqnorm(Residuals,main="Normal Probability Plot")
qqline(Residuals)
###create the residual plot
plot(Fitted, main="Residuals vs Fitted Plot", Residuals,xlab="fitted",ylab="resid")
abline(h=0,lty=2)
Fitted=out$fitted.values
## In ANOVA, the fitted value is the sample average within each group/treatment.
## They are fitting the mu's.
Residuals=out$residuals
shapiro.test(Residuals)
library(nortest)
ad.test(Residuals)
## In ANOVA, the fitted value is the sample average within each group/treatment.
## They are fitting the mu's.
shapiro.test(Residuals)
library(nortest)
ad.test(Residuals)
## Shapiro-Wilk normality test
shapiro.test(Residuals)
Fitted=hw4_2out$fitted.values
## In ANOVA, the fitted value is the sample average within each group/treatment.
## They are fitting the mu's.
Residuals=hw4_2out$residuals
###create the normal probability plot
qqnorm(Residuals,main="Normal Probability Plot")
qqline(Residuals)
###create the residual plot
plot(Fitted, main="Residuals vs Fitted Plot", Residuals,xlab="fitted",ylab="resid")
abline(h=0,lty=2)
install.packages("Devore7")
library(Devore7)
data(ex10.42)
ex10.42
?ex10.46
??ex10.46
?ex10.42
knitr::opts_chunk$set(echo = TRUE)
knitr::include_graphics("/Users/muhtasim/Desktop/int plot.jpeg")
knitr::include_graphics("/Users/muhtasim/Desktop/residualplot.jpeg")
1-pf(1.828,2,8)
install.packages("ISLR")
library(ISLR)
data(Credit)
###simple linear regression
##y=x*b+error###
##example###
install.packages("ISLR")  ##for dataset
library(ISLR)
data(Credit)
install.packages("ISLR")
Credit
?Credit
?Credit
??Credit
data(credit)
data(Credit)
Credit
?Credit
library(ISLR)
data(Credit)
Credit
?Credit
summary(Credit)
lm(Balance ~ Student + Limit, data=Credit)
plot(Credit$Income,Credit$Balance)
###any linear regression model can be fit using the
#internal function lm()
model=lm(Balance~Income,data=Credit)
s=summary(model)
plot(Credit$Income,Credit$Balance)
###any linear regression model can be fit using the
#internal function lm()
model=lm(Balance~Income,data=Credit)  #computes the least squares
s=summary(model)
###any linear regression model can be fit using the
#internal function lm()
model=lm(Balance~Income,data=Credit)  #computes the least squares
s=summary(model)
library(ISLR)
data(Credit)
Credit
?Credit
#summary(Credit)
#lm(Balance ~ Student + Limit, data=Credit)
plot(Credit$Income,Credit$Balance)
###any linear regression model can be fit using the
#internal function lm()
model=lm(Balance~Income,data=Credit)  #computes the least squares
s=summary(model)
###any linear regression model can be fit using the
#internal function lm()
model=lm(Balance~Income,data=Credit)  #computes the least squares
library(ISLR)
library(ISLR)
data(Credit)
Credit
?Credit
#summary(Credit)
#lm(Balance ~ Student + Limit, data=Credit)
plot(Credit$Income,Credit$Balance)
###any linear regression model can be fit using the
#internal function lm()
model=lm(Balance~Income,data=Credit)  #computes the least squares
s=summary(model)
s
##general comment: to check all available information in an object
names(model)
names(s)
s$coefficients
##pvalues
#pvalue for the income coefficient
s$coefficients[2,4]
##confidence intervals for b0 and b1
cf=confint(model,level=0.95)
cf
hb1=(t(x-mean(x))%*%(y-mean(y)))/(t(x-mean(x))%*%(x-mean(x)))  #estimate of b1 is hb1, t means transpose
###check if this matches up with the lecture notes
#CI for b1: [hb1-t*SE,hb1+t*SE] (formula from class)
x=Credit$Income; y=Credit$Balance
hb1=(t(x-mean(x))%*%(y-mean(y)))/(t(x-mean(x))%*%(x-mean(x)))  #estimate of b1 is hb1, t means transpose
hb1
hb0=mean(y)-hb1*mean(x)
hb0
alpha=0.05; n=dim(Credit)[1];n
t=qt(1-alpha/2,df=n-2)   #we lost two df because we computed two sample means for b0 and b1
t
### in SLR: SE_hb1=sqrt(MSE/S_xx)
s_xx=t(x-mean(x))%*%(x-mean(x))
s_xx=t(x-mean(x))%*%(x-mean(x))
pred=hb0+hb1*x
MSE=sum((y-pred)^2)/(n-2)
pred=c(hb0)+c(hb1)*x
MSE=sum((y-pred)^2)/(n-2)
SE_hb1=sqrt(MSE/S_xx)
### in SLR: SE_hb1=sqrt(MSE/S_xx)
s_xx=t(x-mean(x))%*%(x-mean(x))
SE_hb1=sqrt(MSE/S_xx)
SE_hb1=sqrt(MSE/s_xx)
CI=c(hb1-t*SEhb1,hb1+t*SEhb1)
CI=c(hb1-t*SE_hb1,hb1+t*SE_hb1)
CI
###Prediction and prediction intervals
##Now that we have a working model, we can try to predict the credit card balance of
#an individual whose income is known.
##suppose Hasan's income is $200,000, what is his credit card balance?
predict(model,data.frame(Income=200),data=Credit,interval="prediction")
predict(model,data.frame(Income=20),data=Credit,interval="prediction")
##construct a CI for the mean of the subpopulation whose income is $200,000 (second type of pred interv)
predict(model,data.frame(Income=200),data=Credit,interval="confidence")
##Try these things yourself on a new dataset
library(MASS)
data(Boston)
?Boston
##medv as the response, lstat as the predictor
plot(Boston$lstat,Boston$medv)
model2=lm(medv~lstat,data=Boston)
s2=summary(model2)
s2
cf2=confint(model2,level=0.95)
cf2
##suppose lstat is 20, what is the median values of house? (first type of pred interv)
predict(model2,data.frame(lstat=20),data=Boston,interval="prediction")
##construct a CI for the mean of the subpopulation whose lstat is 20 (second type of pred interv)
predict(model2,data.frame(lstat=20),data=Boston,interval="confidence")
knitr::opts_chunk$set(echo = TRUE)
library(Devore7) #Do this every time you use it
data(ex11.40) ## load the dataset
ex11.40 ##display the dataset
out = aov(cff~color, data=ex11.40) ## now you can run ANOVA with this datset
ex11.40 ##display the dataset
out = aov(sizing~conc+pH+tempture+time, data=ex11.40) ## now you can run ANOVA with this datset
out
summary(out)
out = aov(sizing~conc*pH*tempture*time, data=ex11.40) ## now you can run ANOVA with this datset
summary(out)
library(Devore7) #loading the library for Devore's textbook exercise
data(ex11.40) ## load the dataset for the specific problem
out = aov(sizing~tempture+time+tempture:time, data=ex11.40) #run ANOVA with this datset
summary(out) #print out summary
knitr::opts_chunk$set(echo = TRUE)
knitr::include_graphics("/Users/muhtasim/Desktop/STAT523/HWs/HW9/prob3")
knitr::include_graphics("/Users/muhtasim/Desktop/STAT523/HWs/HW9/prob3")
qt(0.975,3)
qt(0.975,2)
knitr::opts_chunk$set(echo = TRUE)
knitr::include_graphics("/Users/muhtasim/Desktop/STAT523/HWs/HW9/prob3")
knitr::include_graphics("/Users/muhtasim/Desktop/STAT523/HWs/HW9/prob3")
knitr::opts_chunk$set(echo = TRUE)
knitr::include_graphics("/Users/muhtasim/Desktop/STAT523/Project/ImagePrep.jpg")
knitr::include_graphics("/Users/muhtasim/Desktop/STAT523/Project/ImagePrep.jpg")
knitr::include_graphics("/Users/muhtasim/Desktop/STAT523/Project/ImagePrep.jpg")
knitr::include_graphics("/Users/muhtasim/Desktop/STAT523/Project/ImagePrep.jpg")
knitr::include_graphics("/Users/muhtasim/Desktop/STAT523/Project/ImagePrep.jpg")
knitr::include_graphics("/Users/muhtasim/Desktop/STAT523/Project/ImagePrep.jpg")
setwd("/Users/muhtasim/Desktop/myRfolder")
data=read.csv("Lab11_nolinear.csv",header=T)
y=data$y
w=data$w
d=data$d
View(data)
lin=lm(y~x,data)
summary(lin)
lin=lm(y~x,data)
lin=lm(y~x,data=data1)
setwd("/Users/muhtasim/Desktop/myRfolder")
data1=read.csv("Lab11_nolinear.csv",header=T)
y=data1$y
w=data1$w
d=data1$d
x=w/d
lin=lm(y~x,data=data1)
summary(lin)
##starting values a=intercept, b=slope/intercept
model<-nls(y~a*(1-exp(-b*(x))),start=list(a=15,b=.5))
summary(model)
##starting values a=intercept, b=slope/intercept
model<-nls(y~a*(1-exp(-b*(x))),start=list(a=45,b=10.5))
summary(model)
##starting values a=intercept, b=slope/intercept
model<-nls(y~a*(1-exp(-b*(x))),start=list(a=85,b=30.5))
##starting values a=intercept, b=slope/intercept
model<-nls(y~a*(1-exp(-b*(x))),start=list(a=85,b=10.5))
summary(model)
##starting values a=intercept, b=slope/intercept
model<-nls(y~a*(1-exp(-b*(x))),start=list(a=15,b=7))
summary(model)
setwd("/Users/muhtasim/Desktop/myRfolder")
data1=read.csv("Lab11_nolinear.csv",header=T)
y=data1$y
w=data1$w
d=data1$d
x=w/d
lin=lm(y~x,data=data1)
summary(lin)
##starting values a=intercept, b=slope/intercept
model<-nls(y~a*(1-exp(-b*(x))),start=list(a=15,b=7))
summary(model)
1-pt(80.014695,2025)
qt(80.014695,2025)
1-pt(80.014695,2025)
1-pt(80.014695,2025)
setwd("/Users/muhtasim/Desktop/STAT523/Project")
mydata=read.csv("data.csv")
setwd("/Users/muhtasim/Desktop/STAT523/Project")
mydata=read.csv("data.csv",header=T,colClasses=c("factor","factor","numeric"))
setwd("/Users/muhtasim/Desktop/STAT523/Project")
mydata=read.csv("data.csv",header=T,colClasses=c("factor","factor","numeric"))
plot.design(mydata)
setwd("/Users/muhtasim/Desktop/STAT523/Project")
mydata=read.csv("data.csv",header=T,colClasses=c("factor","factor","numeric"))
plot.design(mydata)
interaction.plot(mydata$MaxRbonds,mydata$RecepLen,mydata$ReacCutoff,xlab="A", ylab="Average Max R_Bonds",trace.label="B")
setwd("/Users/muhtasim/Desktop/STAT523/Project")
mydata=read.csv("data.csv",header=T,colClasses=c("factor","factor","numeric"))
plot.design(mydata)
interaction.plot(mydata$MaxRbonds,mydata$ReacCutoff,mydata$RecepLen,xlab="A", ylab="Average Max R_Bonds",trace.label="B")
setwd("/Users/muhtasim/Desktop/STAT523/Project")
mydata=read.csv("data.csv",header=T,colClasses=c("factor","factor","numeric"))
plot.design(mydata)
interaction.plot(mydata$MaxRbonds,mydata$ReacCutoff,mydata$RecepLen,xlab="A", ylab="Average Max R_Bonds",trace.label="B")
setwd("/Users/muhtasim/Desktop/STAT523/Project")
mydata=read.csv("data.csv",header=T,colClasses=c("factor","factor","numeric"))
plot.design(mydata)
interaction.plot(mydata$RecepLen,mydata$ReacCutoff,mydata$MaxRbonds,xlab="A", ylab="Average Max R_Bonds",trace.label="B")
setwd("/Users/muhtasim/Desktop/STAT523/Project")
mydata=read.csv("data.csv",header=T,colClasses=c("factor","factor","numeric"))
plot.design(mydata)
interaction.plot(mydata$RecepLen,mydata$ReacCutoff,mydata$MaxRbonds,xlab="Factor A : Receptor Length", ylab="Average Max R_Bonds",trace.label="Factor B : Reaction Cutoff")
setwd("/Users/muhtasim/Desktop/STAT523/Project")
mydata=read.csv("data.csv",header=T,colClasses=c("factor","factor","numeric"))
plot.design(mydata)
interaction.plot(mydata$RecepLen,mydata$ReacCutoff,mydata$MaxRbonds,xlab="Factor A : Receptor Length", ylab="Average Max R_Bonds",trace.label="Factor B : \n Reaction Cutoff")
model=aov(MaxRbonds ~ RecepLen + ReacCutoff,data=mydata)
summary(model) # ANOVA table
model=aov(MaxRbonds ~ RecepLen * ReacCutoff,data=mydata)
summary(model) # ANOVA table
model=aov(MaxRbonds ~ RecepLen * ReacCutoff,data=mydata)
summary(model) # ANOVA table
coef(model)
model=aov(MaxRbonds ~ RecepLen * ReacCutoff,data=mydata)
summary(model) # ANOVA table
coefficients(model)
model=aov(MaxRbonds ~ RecepLen * ReacCutoff,data=mydata)
summary(model) # ANOVA table
coefficients(model)
TukeyHSD(model,conf.level=.95)
model=aov(MaxRbonds ~ RecepLen * ReacCutoff,data=mydata)
summary(model) # ANOVA table
coefficients(model)
TukeyHSD(model,conf.level=.95)
source(url("http://math.wsu.edu/math/faculty/jpascual/stat423/R/two-way-T-method.R")) > twoway.t.method(model)
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/muhtasim/Desktop/STAT523/Project")
mydata=read.csv("data.csv",header=T,colClasses=c("factor","factor","numeric"))
par(mfrow=c(1,2))
plot.design(mydata)
interaction.plot(mydata$RecepLen,mydata$ReacCutoff,mydata$MaxRbonds,xlab="Factor A : RecepLen", ylab="Average Max R_Bonds",trace.label="Factor B : \n ReacCutoff")
source(url("http://math.wsu.edu/math/faculty/jpascual/stat423/R/chap13fcns.R"))
residplots.lm(model,std.resid=F)
source(url("http://math.wsu.edu/math/faculty/jpascual/stat423/R/chap13fcns.R"))
residplots.lm(model,std.resid=F)
library(lmtest)
bptest(model)
View(mydata)
#data setup
regdata=read.csv("regdata.csv",header=T)
cutoff=mydata[,1]
max_Rbonds=mydata[,2]
#scatter plot
plot(cutoff,max_Rbonds,ylab="Reaction Cutoff",xlab="Max R_Bonds")
#SLR
model=lm(max_Rbonds~cutoff,data=regdata)
View(regdata)
#SLR
fit=lm(max_Rbonds~cutoff,data=regdata)
#SLR
model1=lm(max_Rbonds~cutoff,data=regdata)
abline(model1)
#model parameters
s=summary(model1)
regdata=read.csv("regdata.csv",header=T)
cutoff=regdata[,1]
max_Rbonds=regdata[,2]
#scatter plot
plot(cutoff,max_Rbonds,ylab="Reaction Cutoff",xlab="Max R_Bonds")
#SLR
model1=lm(max_Rbonds~cutoff,data=regdata)
abline(model1)
#model parameters
s=summary(model1)
s
coefficients(model1)
cf=confint(model1,level=0.95)
cf
y=max_Rbonds
x=cutoff
predict(lm(y ~ x))
#creating new values for prediction
new <- data.frame(x = seq(2.0, 3.5, 0.25))
predict(lm(y ~ x), new, se.fit = TRUE)
pred.w.plim <- predict(lm(y ~ x), new, interval = "prediction")
pred.w.clim <- predict(lm(y ~ x), new, interval = "confidence")
#prediction plots
matplot(new$x, cbind(pred.w.clim, pred.w.plim[,-1]),  type = "l",
ylab = "Predicted % Female Participation", xlab = "New Fertility Rate")
#Diagnostic plots
#plot of residual vs x and fitted values
plot(model1$fitted, model1$res)
# Normal probability plot of Residuals
par(mfrow=c(1,2))
qqnorm(model1$res)
qqline(model1$res)
hist(model1$res)
shapiro.test(model1$res)
bptest(model1)
#durbin-watson test
dwtest(model1)
library(MASS)
boxcox(worker ~ rate, data = mydata,
lambda = seq(-12.0, 2.0, length = 10))
boxcox(max_Rbonds ~ cutoff, data = regdata,
lambda = seq(-12.0, 2.0, length = 10))
boxcox(max_Rbonds ~ cutoff, data = regdata,
lambda = seq(-2.0, 2.0, length = 10))
boxcox(max_Rbonds ~ cutoff, data = regdata,
lambda = seq(-2.0, 4.0, length = 10))
View(regdata)
